#!/bin/bash

# If not a release, ver set to: "YYYY-MM-DD::04", where `04` - incremental change version for date
declare -A opts=([tools]="$HOME/.config/DeckTools" [ver]="2025-03-23::01")
opts[bin]="${opts[tools]}/bin"
opts[cache]="${opts[tools]}/cache"

function download() {
  if [[ $1 =~ ^https?:\/\/.+$ ]]; then
    [[ ! -e "$2" ]] && curl -sSL $1 -o $2 --create-dirs
  else
    local org="$1"
    local ver="$3"
    local file=${2//'#VER#'/$ver}
    local dest="$4"
    local multifile="$5" # Если множество файлов, а не единственный выполняемый в архиве
    local parent="$(dirname $dest)"
    local part="$([[ $ver =~ ^v?\.?[-\.0-9]*$ ]] && echo 'releases/download' || echo 'raw')"

    if [[ ! -e "$dest" ]] && zenity --question --no-wrap --width=300 --title="Not Installed, Install?" --text="Org: $org\nFile: $file\nVer: $ver"; then
      curl -sSL "https://github.com/$org/$part/$ver/$file" -o "$([[ "$file" == *.zip ]] && echo $dest.zip || echo $dest)" --create-dirs
      if [[ "$file" == *.zip ]]; then
        zenity --info --no-wrap --width=200 --title='Downloading Script' --text="$file \n $dest \n $dest.zip"
        if [ "$multifile" = "true" ]; then
          unzip -d $dest "$dest.zip"
        else
          unzip -p "$dest.zip" > $dest
        fi
        rm -f "$dest.zip"
      fi
      if [[ -e "$dest" ]] && [[ ! -d "$dest" ]]; then
        chmod +x $dest
      fi
    fi
  fi
}

function install() {
  if ! flatpak list --app | grep "$2" && zenity --question --no-wrap --width=300 --title='Not Installed, Install?' --text="$1"; then
    flatpak install --user -y --noninteractive flathub "$2"
  fi
}

function run() {
  if [[ "$1" =~ ^[^\/][\.[:alnum:]_-]+[^\/]$ ]]; then
    flatpak list --app | grep "$1" && {
      flatpak run --command="$2" --file-forwarding "$1" @@u %u @@;
      exit $?;
    }
  else
    if [[ ! -x "$1" ]] && zenity --question --no-wrap --width=300 --title='Installed, but Misses -X Persmission. Force Set Flag Now?' --text="$(basename $1)"; then
      chmod +x "$1"
    fi
    if [[ "$2" = 'Terminal' ]]; then
      konsole -e "$1"
    else
      [[ -x "$1" ]] && { "$@"; exit $?; }
    fi
  fi
}

function edit() {
  sed -i 's#'$1'=.*#'$1'="'$2'"#' $3
}

function init() {
  function put_shortcut() {
    declare -A file=([label]="$1" [size]=512 [url]="$2")
    file[base_name]=`echo ${file[label]} | tr '[:upper:]' '[:lower:]' | tr ' ' '-'`
    file[with_ext]="${file[base_name]}.png"
    file[full_path]="${opts[cache]}/${file[with_ext]}"

    if [[ ! -f "$HOME/.local/share/icons/hicolor/${file[size]}x${file[size]}/apps/${file[with_ext]}" ]]; then
      download ${file[url]} ${file[full_path]}
      xdg-icon-resource install --novendor --context apps --size ${file[size]} ${file[full_path]}
    fi

    if [[ ! -f "$HOME/Desktop/${file[label]}.desktop" ]]; then
      cat <<EOF>> "$HOME/Desktop/${file[label]}.desktop"
#!/usr/bin/env xdg-open
[Desktop Entry]
Name=${file[label]}
Terminal=false
Type=Application
Exec=${opts[bin]}/gui '${file[label]}'
Icon=${file[base_name]}
Categories=Utils;
Comment=Various Tools for Steam Deck
StartupNotify=true
EOF
     fi
  }

  put_shortcut 'Deck Tools' 'https://deckbrew.xyz/static/icon-45ca1f5aea376a9ad37e92db906f283e.png'
  put_shortcut 'Game Launchers' 'https://hugolispector.com/images/apps/controlly.png'
}

function main() {
  while opt=$(zenity --width=500 --height=400 --title="$1 [${opts[ver]}]" --text="$prompt" --ok-label="Run" --cancel-label="Quit" --list --column="Name" --column="Description" --column="value" --hide-column=3 --print-column=3 "${options[@]}");
  do
    case "$opt" in
      1)
        declare -A sd=([home]='/home/deck' [microSD]='/run/media/mmcblk0p1' [title]='Steam Deck Backup')
        mkdir "${sd[home]}/${sd[title]}" && cd "${sd[home]}/${sd[title]}" && printf "# ${sd[title]}" > 'README.md'


        # Ludusavi Settings and Games Saves
        mkdir Ludusavi
        rsync -P -L -azr --exclude={'cache.yaml','manifest.yaml'} "${sd[home]}/.var/app/com.github.mtkennerly.ludusavi/config/ludusavi/" 'Ludusavi'
        # flatpak run --cwd=/home/deck --nosocket=fallback-x11 --socket=x11 --env="RUST_LOG=ludusavi=trace" -vv com.github.mtkennerly.ludusavi backup --force --api >/home/deck/.var/app/com.github.mtkennerly.ludusavi/config/ludusavi/error.log 2>&1
        # ${opts[bin]}/ludusavi --config=${sd[home]}/.var/app/com.github.mtkennerly.ludusavi/config/ludusavi backup --path="${sd[home]}/${sd[title]}/Saves" --force


        # EmuDeck Settings and Games Saves
        mkdir -p EmuDeck/Saves
        rsync -P -a "${sd[home]}/emudeck/settings.sh" 'EmuDeck/Config/'
        find Saves/ -maxdepth 1 -type d -name 'EmuDeck - *' -exec mv -t EmuDeck/Saves/ -- {} +


        # Chiaki Settings
        mkdir Chiaki
        rsync -P -azr "${sd[home]}/.var/app/io.github.streetpea.Chiaki4deck/config/Chiaki/" 'Chiaki'
        rsync -P -a "${sd[home]}/.steam/root/controller_base/templates/chiaki_controller_config.vdf" 'Chiaki'


        # Decky Loader and Plugins Settings
        mkdir -p Decky/plugins/{SteamGridDB,PowerTools,CSSLoader,TabMaster,ProtonDB}
        rsync -P -a "${sd[home]}/homebrew/settings/loader.json" 'Decky/config.json'

        rsync -P -a "${sd[home]}/homebrew/settings/decky-steamgriddb/steamgriddb.json" 'Decky/plugins/SteamGridDB/config.json'
        rsync -P -azr --no-relative --files-from=<(find ${sd[home]}/.local/share/Steam/userdata -name shortcuts.vdf -print) / 'Decky/plugins/SteamGridDB/'
        rsync -P -azr --no-relative --files-from=<(find ${sd[home]}/.local/share/Steam/userdata -name grid -type d -print) / 'Decky/plugins/SteamGridDB/'

        find ${sd[home]}/homebrew/themes/* -maxdepth 0 -type d -exec basename {} \; | jq -R | jq -s > 'Decky/plugins/CSSLoader/list.json'
        rsync -P -azr -m --include="*/" --include="config_USER.json" --exclude="*" "${sd[home]}/homebrew/themes/" 'Decky/plugins/CSSLoader/'

        rsync -P -a "${sd[home]}/homebrew/settings/TabMaster/settings.json" 'Decky/plugins/TabMaster/config.json'

        rsync -P -a "${sd[home]}/homebrew/settings/protondb-decky/settings.json" 'Decky/plugins/ProtonDB/config.json'

        find ${sd[home]}/.config/powertools -regex '.*[0-9]+\.json' -exec jq -r '{(input_filename | gsub(".*/|\\.json$"; "")): .name}' {} \; | jq -s 'add' > 'Decky/plugins/PowerTools/list.json'
        rsync -P -azr --exclude={'limits_cache.*','.version'} "${sd[home]}/.config/powertools/" 'Decky/plugins/PowerTools'


        # System Settings and Compatibility Tools (/home/deck/.local/share/Steam/userdata/42705380/250900/remote)
        mkdir -p System/{StartupMovies,SSH,Icons,Menus,Launchers,Desktop,CompatTools}
        rsync -P -L -azr "${sd[home]}/.config/AnimationChanger/downloads/" 'System/StartupMovies'
        rsync -P -L -azr "${sd[home]}/.steam/root/config/uioverrides/movies/" 'System/StartupMovies'

        find "${sd[home]}/.steam/root/compatibilitytools.d" -type f -regex '.*/GE-Proton[0-9\-]*/version' -exec cat {} + | sed -E "s|.*GE-Proton([0-9-]*)|\1|g" > 'System/CompatTools/ProtonGE.ver'
        rsync -P -a "${sd[home]}/.steam/root/compatibilitytools.d/SteamTinkerLaunch/VERSION.txt" 'System/CompatTools/SteamTinkerLaunch.ver'

        rsync -P -L -azr "${sd[home]}/.ssh/" 'System/SSH'
        rsync -P -L -azr "${sd[home]}/.local/share/icons/" 'System/Icons'
        rsync -P -L -azr "${sd[home]}/.local/share/applications/" 'System/Launchers'
        rsync -P -L -azr "${sd[home]}/.config/menus/" 'System/Menus'
        rsync -P -L -azr "${sd[home]}/Desktop/" 'System/Desktop'


        # Create archive
        7z a -t7z "${sd[title]}.7z" * -r -mx9 -scsUTF-8
      ;;
      2)
        local data="${opts[cache]}/BTRFS"
        local script="$data/SteamDeckBTRFS.sh"

        download 'mi5hmash/SteamDeckBTRFS' 'SteamDeckBTRFS_#VER#.zip' 'v2.0.10' $data true
        run $script 'Terminal'
      ;;
      3)
        local id='net.davidotek.pupgui2'

        install 'ProtonUp-Qt' $id
        run $id $id
      ;;
      4)
        local script="${opts[cache]}/decky_install.sh"

        download 'SteamDeckHomebrew/decky-installer' 'user_install_script.sh' 'v1.9.0' $script
        run $script
      ;;
      5)
        # Disk Tools
        install 'Disk Usage Analyzer' 'org.gnome.baobab'
        install 'Flatpak Permissions Editor' 'com.github.tchx84.Flatseal'
        install 'KDiskMark Perfomance Analyzer' 'io.github.jonmagon.kdiskmark'

        # Steam Tools
        install 'Steam Metadata Editor' 'io.github.tralph3.Steam_Metadata_Editor'
        install 'Ludusavi Steam Save Manager' 'com.github.mtkennerly.ludusavi'

        break;
      ;;
      6)
        if `systemctl is-active --quiet sshd`; then
          zenity --info --no-wrap --width=200 --title='Stopping SSHD...' --text='In 3...2...1...'
          sudo /usr/bin/systemctl stop sshd.service
        else
          function start() {
            if [[ -z "$1" ]]; then
              local subtitle='SSHD Started'
              sudo /usr/bin/systemctl start sshd.service
              local status=$?
            else
              local subtitle='SSHD Started (SUDO typed manually)'
              echo "$passwd" | sudo -S /usr/bin/systemctl start sshd.service
              local status=$?
            fi

            if [[ $status -eq 0 ]]; then
              local usr=`whoami`
              local ip=`ip addr show wlan0 | grep -Po 'inet \K[\d.]+'`

              zenity --info --no-wrap --width=200 --title=$subtitle --text="Connect to sftp://$usr@$ip:22"
              echo 0; exit 0;
            else
              echo 2; exit 2;
            fi
          }

          ## Try to Recover If sshd Not Available Without Sudo
          if [[ `start` -ne 0 ]]; then
            local passwd=$(zenity --forms --width=300 --window-icon=error --title='Failed to Start SSHD' --text='Please Type Your SUDO Password Manually to Retry' --separator="," --add-password="Your SUDO password")

            ## Fail If Provided Sudo Passsword is Empty
            if [[ -z "$passwd" ]]; then
              zenity --error --no-wrap --width=200 --window-icon=error --title='Failed to Start SSHD' --text='No SUDO Password Provided, Aborting'
              exit 1
            fi

            ## Fail If Provided Sudo Passsword Invalid
            if [[ `start "$passwd"` -ne 0 ]]; then
              zenity --error --no-wrap --width=200 --window-icon=error --title='Failed to Start SSHD' --text='Wrong SUDO Password Provided, Aborting'
              exit 1
            fi
          fi
        fi

        break;
      ;;
      7)
        local id='com.heroicgameslauncher.hgl'

        install 'Heroic Launcher' $id
        run $id 'heroic-run'
      ;;
      8)
        local id='io.github.streetpea.Chiaki4deck'

        if ! flatpak list --app | grep "$id" && zenity --question --no-wrap --width=300 --title='Not Installed, Install?' --text="$id"; then
          flatpak install --user -y --noninteractive flathub $id
          run $id 'psn-account-id'
          # flatpak run --command=psn-account-id io.github.streetpea.Chiaki4deck
          # bash <(curl -sLo- https://raw.githubusercontent.com/streetpea/chiaki4deck/main/scripts/gen-launcher.sh)
        fi
      ;;
      9)
        local id='io.github.philipk.boilr'

        install 'BoilR' $id # download 'PhilipK/BoilR' 'linux_BoilR' 'v.1.9.4' "${opts[bin]}/BoilR"
        run $id 'boilr'
      ;;
      *) zenity --error --text="Invalid option. Try another one." ;;
    esac
  done
}

init
case "$1" in
  'Deck Tools')
    options=()
    options+=("Backup Tool" "Backup Console, Plugins, Settings and Games Saves" 1)
    options+=("SD BTRFS" "Install Patch to support BTRFS formatted microSD cards" 2)
    options+=("Proton GE" "Install Proton version /w Community Fixes" 3)
    options+=("Decky Loader" "Install/Verify DeckyLoader" 4)
    options+=("System Tools" "Install Must Have Tools" 5)
    options+=("File Transfer" "Start/Stop SSHD Daemon for File Transfer" 6)

    main "$1"
  ;;
  'Game Launchers')
    options=()
    options+=("Heroic Games" "GOG and Epic Integration w/ Steam" 7)
    options+=("Chiaki" "PS4/PS5 Games Streaming on Deck" 8)
    options+=("BoilR" "Games Logo/Icon Downloader for Non-Steam Game Launchers" 9)

    main "$1"
  ;;
  *) # No Args Passed
    zenity --error --width=400 --text="Positional argument 'mode' with unknown value: $1\nExiting..."
    exit 1;
  ;;
esac
